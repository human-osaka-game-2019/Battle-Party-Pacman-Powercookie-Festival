#include <iostream>
#include <string>
#include <fstream>
#include "Mapchip.h"
#include "Main.h"

int** MapchipLoading::mapchip(const char* filename, int Hrow, int Hcol, int** data) {

	using namespace std;
	ifstream stream(filename);
	string line;
	const string delim = ",";

	int row = 0;
	int col;
	while (getline(stream, line)) {
		col = 0;
		// delimを区切り文字として切り分け、intに変換してdata[][]に格納する
		for (string::size_type spos, epos = 0;
			(spos = line.find_first_not_of(delim, epos)) != string::npos;) {
			string token = line.substr(spos, (epos = line.find_first_of(delim, spos)) - spos);
			data[row][col++] = stoi(token);
		}
		++row;
	}

	//                   ↓15が行数、１４が列の数
	for (row = 0; row < Hrow; ++row) {
		for (col = 0; col < Hcol; ++col) {
			cout << data[row][col] << " ";
		}
		cout << endl;
	}

	return data;
}

int MapchipLoading::textureprint(int** F, int s, int d)
{
	for (int i = 0; i < s; i++) {
		
		for (int j = 0; j < d; j++)
		{
			
		}
	}

	return 0;
}

static const int WORLD_VERTICAL_NUM = 31;
static const int WORLD_HORIZONTAL_NUM = 28;
static const float CHIP_SIZE = 32;
static const float TEXTURE_WIDTH = 256;
static const float TEXTURE_HEIGHT = 256;
static const float CHIP_WIDTH_NUM = TEXTURE_WIDTH / 8;
static const float CHIP_HEIGHT_NUM = TEXTURE_HEIGHT / 8;
static const int HORIZONTAL_NUM = TEXTURE_WIDTH / CHIP_WIDTH_NUM;
static const int VERTICAL_NUM = TEXTURE_HEIGHT / CHIP_HEIGHT_NUM;


void DrawMap::DrawMapchip(float draw_start_pos_x, float draw_start_pos_y, int texturename, int** map)
{
	for (int i = 0; i < WORLD_VERTICAL_NUM; i++)
	{
		for (int j = 0; j < WORLD_HORIZONTAL_NUM; j++)
		{
			int chip_id = map[i][j];
			if (chip_id == 0)
			{
				continue;
			}

			float draw_pos_x = draw_start_pos_x + CHIP_SIZE * j;
			float draw_pos_y = draw_start_pos_y + CHIP_SIZE * i;

			float tu = (chip_id % HORIZONTAL_NUM) * CHIP_WIDTH_NUM / TEXTURE_WIDTH;
			float tv = (chip_id / VERTICAL_NUM) * CHIP_HEIGHT_NUM / TEXTURE_HEIGHT;

			float tu_width = static_cast<float>((CHIP_WIDTH_NUM) / TEXTURE_WIDTH);
			float tv_height = static_cast<float>((CHIP_HEIGHT_NUM) / TEXTURE_HEIGHT);

			Draw(draw_pos_x, draw_pos_y, 0xffffffff, tu, tv,CHIP_SIZE, CHIP_SIZE, tu_width, tv_height, texturename);
		}
	}
}



void DrawMap::InitMap()
{
	int init_left_map[31][28] =
	{ 5,	2,	 2,	 2,	 2,	 2,	 2,	 2,	 2,	 2,	 2,	 2,	 2,	25,	26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,	 2,	 6,
	   1,  35,	35,	35,	35,	35,	35,	35,	35, 35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	 3,
	   1,  35,	17,  4,	 4,	18,	35,	17,	 4,  4,	 4,	18,	35,	11,	 9,	35,	17,	 4,	 4,	 4,	18,	35,	17,	 4,	 4,	18,	35,	 3,
	   1,  38,	 3,	 0,	 0,	 1,	35,	 3,	 0,  0,	 0,	 1,	35,	11,	 9,	35,	 3,	 0,	 0,	 0,	 1,	35,	 3,	 0,	 0,	 1,	38,	 3,
	   1,  35,	20,	36,	36,	19,	35,	20,	36, 36,	36,	19,	35,	24,	23,	35,	20,	36,	36,	36,	19,	35,	20,	36,	36,	19,	35,	 3,
	   1,  35,	35,	35,	35,	35,	35,	35,	35, 35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	 3,
	   1,  35,	21,	12,	12,	22,	35,	21,	22, 35,	21,	12,	12,	12,	12,	12,	12,	22,	35,	21,	22,	35,	21,	12,	12,	22,	35,	 3,
	   1,  35,	24,	10,	10,	23,	35,	11,	 9, 35,	24,	10,	10,	31,	32,	10,	10,	23,	35,	11,	 9,	35,	24,	10,	10,	23,	35,	 3,
	   1,  35,	35,	35,	35,	35,	35,	11,	 9, 35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	35,	35,	 3,
	   8,   4,	 4,	 4,	 4,	15,	35,	11,	33, 12,	12,	22,	 0,	11,	 9,	 0,	21,	12,	12,	34,	 9,	35,	13,	 4,  4,	 4,	 4,	 7,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	32, 10,	10,	23,	 0,	24,	23,	 0,	24,	10,	10,	31,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	 9,  0,	 0,	 0,	 0,	 0,	 0,	 0,	 0,	 0,	 0,	11,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	 9,  0,	17,	 4,	 4,	37,	37,	 4,	 4,	18,	 0,	11,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   2,   2,	 2,	 2,	 2,	16,	35,	24,	23,  0,	 3,	 0,  0,	 0,	 0,	 0,  0,	 1,	 0,	24,	23,	35,	14,	 2,  2,	 2,	 2,	 2,
	   0,	0,	 0,	 0,	 0,	 0,	35,	 0,	 0,  0,	 3,	 0,  0,	 0,  0,  0,  0,	 1,	 0,	 0,	 0,	35,	 0,	 0,  0,	 0,	 0,	 0,
	   4,   4,	 4,	 4,	 4,	15,	35,	21,	22,  0,	 3,	 0,	 0,  0,  0,  0,  0,  1,	 0,	21,	22,	35,	13,	 4,  4,	 4,	 4,	 4,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	 9,  0,	20,	 2,	 2,	 2,	 2,	 2,	 2,	19,	 0,	11,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	 9,  0,	 0,	 0,	 0,  0,	 0,	 0,	 0,	 0,	 0,	11,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	 9,  0,	21,	12,	12,	12,	12,	12,	12,	22,	 0,	11,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   5,   2,	 2,	 2,	 2,	16,	35,	24,	23,  0,	24,	10,	10,	31,	32,	10,	10,	23,	 0,	24,	23,	35,	14,	 2,  2,	 2,	 2,	 6,
	   1,  35,	35, 35,	35,	35,	35,	35,	35, 35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	 3,
	   1,  35,	21, 12,	12,	22,	35,	21,	12, 12,	12,	22,	35,	11,	 9,	35,	21,	12,	12,	12,	22,	35,	21,	12,	12,	22,	35,	 3,
	   1,  35,	24, 10,	31,	 9,	35,	24,	10, 10,	10,	23,	35,	24,	23,	35,	24,	10,	10,	10,	23,	35,	11,	32,	10,	23,	35,	 3,
	   1,  38,	35, 35,	11,	 9,	35,	35,	35, 35,	35,	35,	35,	 0,	 0,	35,	35,	35,	35,	35,	35,	35,	11,	 9,	35,	35,	38,	 3,
	  29,  12,	22, 35,	11,	 9,	35,	21,	22, 35,	21,	12,	12,	12,	12,	12,	12,	22,	35,	21,	22,	35,	11,	 9,	35,	21,	12,	27,
	  30,  10,	23, 35,	24,	23,	35,	11,	 9, 35,	24,	10,	10,	31,	32,	10,	10,	23,	35,	11,	 9,	35,	24,	23,	35,	24,	10,	28,
	   1,  35,	35, 35,	35,	35,	35,	11,	 9, 35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	35,	35,	 3,
	   1,  35,	21, 12,	12,	12,	12,	34,	33, 12,	12,	22,	35,	11,	 9,	35,	21,	12,	12,	34,	33,	12,	12,	12,	12,	22,	35,	 3,
	   1,  35,	24, 10,	10,	10,	10,	10,	10, 10,	10,	23,	35,	24,	23,	35,	24,	10,	10,	10,	10,	10,	10,	10,	10,	23,	35,	 3,
	   1,  35,	35, 35,	35,	35,	35,	35,	35, 35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	 3,
	   8,   4,	 4,	 4,  4,	 4,	 4,	 4,	 4,  4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 7, };




	for (int i = 0; i < 31; i++)
	{
		for (int j = 0; j < 28; j++)
		{
			left_map[j][i] = init_left_map[j][i];
		}
	}

	int init_right_map[31][28] =
	{ 5,   2,	 2,	 2,	 2,	 2,	 2,	 2,	 2,	 2,	 2,	 2,	 2,	25,	26,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,	 2,	 6,
	   1,  35,	35,	35,	35,	35,	35,	35,	35, 35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	 3,
	   1,  35,	17,  4,	 4,	18,	35,	17,	 4,  4,	 4,	18,	35,	11,	 9,	35,	17,	 4,	 4,	 4,	18,	35,	17,	 4,	 4,	18,	35,	 3,
	   1,  38,	 3,	 0,	 0,	 1,	35,	 3,	 0,  0,	 0,	 1,	35,	11,	 9,	35,	 3,	 0,	 0,	 0,	 1,	35,	 3,	 0,	 0,	 1,	38,	 3,
	   1,  35,	20,	36,	36,	19,	35,	20,	36, 36,	36,	19,	35,	24,	23,	35,	20,	36,	36,	36,	19,	35,	20,	36,	36,	19,	35,	 3,
	   1,  35,	35,	35,	35,	35,	35,	35,	35, 35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	 3,
	   1,  35,	21,	12,	12,	22,	35,	21,	22, 35,	21,	12,	12,	12,	12,	12,	12,	22,	35,	21,	22,	35,	21,	12,	12,	22,	35,	 3,
	   1,  35,	24,	10,	10,	23,	35,	11,	 9, 35,	24,	10,	10,	31,	32,	10,	10,	23,	35,	11,	 9,	35,	24,	10,	10,	23,	35,	 3,
	   1,  35,	35,	35,	35,	35,	35,	11,	 9, 35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	35,	35,	 3,
	   8,   4,	 4,	 4,	 4,	15,	35,	11,	33, 12,	12,	22,	 0,	11,	 9,	 0,	21,	12,	12,	34,	 9,	35,	13,	 4,  4,	 4,	 4,	 7,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	32, 10,	10,	23,	 0,	24,	23,	 0,	24,	10,	10,	31,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	 9,  0,	 0,	 0,	 0,	 0,	 0,	 0,	 0,	 0,	 0,	11,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	 9,  0,	17,	 4,	 4,	37,	37,	 4,	 4,	18,	 0,	11,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   2,   2,	 2,	 2,	 2,	16,	35,	24,	23,  0,	 3,	 0,	 0,	 0,	 0,	 0,	 0,	 1,	 0,	24,	23,	35,	14,	 2,  2,	 2,	 2,	 2,
	   0,   0,	 0,	 0,	 0,	 0,	35,	 0,	 0,  0,	 3,	 0,	 0,	 0,	 0,	 0,	 0,	 1,	 0,	 0,	 0,	35,	 0,	 0,  0,	 0,	 0,	 0,
	   4,   4,	 4,	 4,	 4,	15,	35,	21,	22,  0,	 3,	 0,	 0,	 0,	 0,	 0,	 0,	 1,	 0,	21,	22,	35,	13,	 4,  4,	 4,	 4,	 4,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	 9,  0,	20,	 2,	 2,	 2,	 2,	 2,	 2,	19,	 0,	11,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	 9,  0,	 0,	 0,	 0,  0,	 0,	 0,	 0,	 0,	 0,	11,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   0,   0,	 0,	 0,	 0,	 1,	35,	11,	 9,  0,	21,	12,	12,	12,	12,	12,	12,	22,	 0,	11,	 9,	35,	3,	 0,  0,  0,  0,  0,
	   5,   2,	 2,	 2,	 2,	16,	35,	24,	23,  0,	24,	10,	10,	31,	32,	10,	10,	23,	 0,	24,	23,	35,	14,	 2,  2,	 2,	 2,	 6,
	   1,  35,	35, 35,	35,	35,	35,	35,	35, 35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	 3,
	   1,  35,	21, 12,	12,	22,	35,	21,	12, 12,	12,	22,	35,	11,	 9,	35,	21,	12,	12,	12,	22,	35,	21,	12,	12,	22,	35,	 3,
	   1,  35,	24, 10,	31,	 9,	35,	24,	10, 10,	10,	23,	35,	24,	23,	35,	24,	10,	10,	10,	23,	35,	11,	32,	10,	23,	35,	 3,
	   1,  38,	35, 35,	11,	 9,	35,	35,	35, 35,	35,	35,	35,	 0,	 0,	35,	35,	35,	35,	35,	35,	35,	11,	 9,	35,	35,	38,	 3,
	  29,  12,	22, 35,	11,	 9,	35,	21,	22, 35,	21,	12,	12,	12,	12,	12,	12,	22,	35,	21,	22,	35,	11,	 9,	35,	21,	12,	27,
	  30,  10,	23, 35,	24,	23,	35,	11,	 9, 35,	24,	10,	10,	31,	32,	10,	10,	23,	35,	11,	 9,	35,	24,	23,	35,	24,	10,	28,
	   1,  35,	35, 35,	35,	35,	35,	11,	 9, 35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	11,	 9,	35,	35,	35,	35,	35,	35,	 3,
	   1,  35,	21, 12,	12,	12,	12,	34,	33, 12,	12,	22,	35,	11,	 9,	35,	21,	12,	12,	34,	33,	12,	12,	12,	12,	22,	35,	 3,
	   1,  35,	24, 10,	10,	10,	10,	10,	10, 10,	10,	23,	35,	24,	23,	35,	24,	10,	10,	10,	10,	10,	10,	10,	10,	23,	35,	 3,
	   1,  35,	35, 35,	35,	35,	35,	35,	35, 35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	35,	 3,
	   8,   4,	 4,	 4,  4,	 4,	 4,	 4,	 4,  4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 4,	 7, };

	for (int i = 0; i < 31; i++)
	{
		for (int j = 0; j < 28; j++)
		{
			right_map[j][i] = init_right_map[j][i];
		}
	}

}


